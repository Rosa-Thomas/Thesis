import * as mod from "@noble/curves/abstract/modular";
declare const Fp: Readonly<mod.IField<bigint> & Required<Pick<mod.IField<bigint>, "isOdd">>>;
type Fp = bigint;
type BigintTuple = [bigint, bigint];
type Fp2 = {
    c0: bigint;
    c1: bigint;
};
declare function fp2FromBigTuple(t: BigintTuple): Fp2;
declare const Fp2: mod.IField<Fp2>;
type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];
type Fp6 = {
    c0: Fp2;
    c1: Fp2;
    c2: Fp2;
};
declare const Fp6: mod.IField<Fp6>;
declare function fp6FromBigSix(b: BigintSix): Fp6;
type Fp12 = {
    c0: Fp6;
    c1: Fp6;
};
type BigintTwelve = [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint
];
declare function fp12FromBigTwelve(b: BigintTwelve): Fp12;
export { Fp, Fp2, Fp6, Fp12, fp2FromBigTuple, fp6FromBigSix, fp12FromBigTwelve, BigintTwelve };
