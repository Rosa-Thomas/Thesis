"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fp12ToBytes = exports.fp6ToBytes = exports.fp2ToBytes = exports.fpToBytes = exports.bytesToHex = exports.bytesToNumberBE = exports.xor = void 0;
const buffer_1 = require("buffer");
// returns a new array with the xor of a ^ b
function xor(a, b) {
    if (a.length != b.length) {
        throw new Error("Error: incompatible sizes");
    }
    const ret = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
        ret[i] = a[i] ^ b[i];
    }
    return ret;
}
exports.xor = xor;
////// code from Noble:
////// https://github.com/paulmillr/noble-bls12-381/blob/6380415f1b7e5078c8883a5d8d687f2dd3bff6c2/index.ts#L132-L145
function bytesToNumberBE(uint8a) {
    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a)));
}
exports.bytesToNumberBE = bytesToNumberBE;
const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
function bytesToHex(uint8a) {
    // pre-caching chars could speed this up 6x.
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += hexes[uint8a[i]];
    }
    return hex;
}
exports.bytesToHex = bytesToHex;
////// end of code from Noble.
// Function to convert Noble's FPs to byte arrays compatible with Kilic library.
// weirdly all the child FPs have to be reversed when serialising to bytes
function fpToBytes(fp) {
    // 48 bytes = 96 hex bytes
    const hex = fp.toString(16).padStart(96, "0");
    const buf = buffer_1.Buffer.alloc(hex.length / 2);
    buf.write(hex, "hex");
    return buf;
}
exports.fpToBytes = fpToBytes;
function fp2ToBytes(fp2) {
    return buffer_1.Buffer.concat([fp2.c1, fp2.c0].map(fpToBytes));
}
exports.fp2ToBytes = fp2ToBytes;
// fp6 isn't exported by noble... let's take off the guard rails
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
function fp6ToBytes(fp6) {
    return buffer_1.Buffer.concat([fp6.c2, fp6.c1, fp6.c0].map(fp2ToBytes));
}
exports.fp6ToBytes = fp6ToBytes;
function fp12ToBytes(fp12) {
    return buffer_1.Buffer.concat([fp12.c1, fp12.c0].map(fp6ToBytes));
}
exports.fp12ToBytes = fp12ToBytes;
//# sourceMappingURL=utils.js.map