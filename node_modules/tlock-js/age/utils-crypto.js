"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.random = exports.createMacKey = void 0;
const hkdf_1 = require("@noble/hashes/hkdf");
const sha256_1 = require("@noble/hashes/sha256");
const hmac_1 = require("@noble/hashes/hmac");
const buffer_1 = require("buffer");
function createMacKey(fileKey, macMessage, headerText) {
    // empty string salt as per the spec!
    const hmacKey = (0, hkdf_1.hkdf)(sha256_1.sha256, fileKey, "", buffer_1.Buffer.from(macMessage, "utf8"), 32);
    return buffer_1.Buffer.from((0, hmac_1.hmac)(sha256_1.sha256, hmacKey, buffer_1.Buffer.from(headerText, "utf8")));
}
exports.createMacKey = createMacKey;
// returns a string of n bytes read from a CSPRNG like /dev/urandom.
async function random(n) {
    if (typeof window === "object" && "crypto" in window) {
        return window.crypto.getRandomValues(new Uint8Array(n));
    }
    // parcel likes to resolve polyfills for things even if they aren't used
    // so this indirection tricks it into not doing it and not complaining :)
    const x = "crypto";
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const bytes = require(x).randomBytes(n);
    return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}
exports.random = random;
//# sourceMappingURL=utils-crypto.js.map