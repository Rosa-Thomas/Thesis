"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashedRoundNumber = exports.createTimelockEncrypter = void 0;
const sha256_1 = require("@noble/hashes/sha256");
const buffer_1 = require("buffer");
const ibe = __importStar(require("../crypto/ibe"));
function createTimelockEncrypter(client, roundNumber) {
    if (roundNumber < 1) {
        throw Error("You cannot encrypt for a roundNumber less than 1 (genesis = 0)");
    }
    return async (fileKey) => {
        const chainInfo = await client.chain().info();
        const pk = buffer_1.Buffer.from(chainInfo.public_key, "hex");
        const id = hashedRoundNumber(roundNumber);
        let ciphertext;
        switch (chainInfo.schemeID) {
            case "pedersen-bls-unchained":
                {
                    ciphertext = await ibe.encryptOnG1(pk, id, fileKey);
                }
                break;
            case "bls-unchained-on-g1":
                {
                    ciphertext = await ibe.encryptOnG2(pk, id, fileKey);
                }
                break;
            case "bls-unchained-g1-rfc9380":
                {
                    ciphertext = await ibe.encryptOnG2RFC9380(pk, id, fileKey);
                }
                break;
            default:
                throw Error(`Unsupported scheme: ${chainInfo.schemeID} - you must use a drand network with an unchained scheme for timelock encryption!`);
        }
        return [{
                type: "tlock",
                args: [`${roundNumber}`, chainInfo.hash],
                body: serialisedCiphertext(ciphertext)
            }];
    };
}
exports.createTimelockEncrypter = createTimelockEncrypter;
function hashedRoundNumber(round) {
    const roundNumberBuffer = buffer_1.Buffer.alloc(64 / 8);
    roundNumberBuffer.writeBigUInt64BE(BigInt(round));
    return (0, sha256_1.sha256)(roundNumberBuffer);
}
exports.hashedRoundNumber = hashedRoundNumber;
function serialisedCiphertext(ciphertext) {
    return buffer_1.Buffer.concat([ciphertext.U, ciphertext.V, ciphertext.W]);
}
//# sourceMappingURL=timelock-encrypter.js.map