"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roundTime = exports.roundAt = exports.FastestNodeClient = exports.MultiBeaconNode = exports.HttpCachingChain = exports.HttpChainClient = exports.HttpChain = exports.isG1Rfc9380 = exports.isG1G2SwappedBeacon = exports.isUnchainedBeacon = exports.isChainedBeacon = exports.watch = exports.fetchBeaconByTime = exports.fetchBeacon = exports.defaultChainOptions = void 0;
const http_caching_chain_1 = __importDefault(require("./http-caching-chain"));
exports.HttpCachingChain = http_caching_chain_1.default;
const http_caching_chain_2 = require("./http-caching-chain");
Object.defineProperty(exports, "HttpChain", { enumerable: true, get: function () { return http_caching_chain_2.HttpChain; } });
const http_chain_client_1 = __importDefault(require("./http-chain-client"));
exports.HttpChainClient = http_chain_client_1.default;
const fastest_node_client_1 = __importDefault(require("./fastest-node-client"));
exports.FastestNodeClient = fastest_node_client_1.default;
const multi_beacon_node_1 = __importDefault(require("./multi-beacon-node"));
exports.MultiBeaconNode = multi_beacon_node_1.default;
const util_1 = require("./util");
Object.defineProperty(exports, "roundAt", { enumerable: true, get: function () { return util_1.roundAt; } });
Object.defineProperty(exports, "roundTime", { enumerable: true, get: function () { return util_1.roundTime; } });
const beacon_verification_1 = require("./beacon-verification");
exports.defaultChainOptions = {
    disableBeaconVerification: false,
    noCache: false,
};
// fetch a beacon for a given `roundNumber` or get the latest beacon by omitting the `roundNumber`
async function fetchBeacon(client, roundNumber) {
    if (!roundNumber) {
        roundNumber = (0, util_1.roundAt)(Date.now(), await client.chain().info());
    }
    if (roundNumber < 1) {
        throw Error('Cannot request lower than round number 1');
    }
    const beacon = await client.get(roundNumber);
    return validatedBeacon(client, beacon, roundNumber);
}
exports.fetchBeacon = fetchBeacon;
// fetch the most recent beacon to have been emitted at a given `time` in epoch ms
async function fetchBeaconByTime(client, time) {
    const info = await client.chain().info();
    const roundNumber = (0, util_1.roundAt)(time, info);
    return fetchBeacon(client, roundNumber);
}
exports.fetchBeaconByTime = fetchBeaconByTime;
// an async generator emitting beacons from the latest round onwards
async function* watch(client, abortController, options = defaultWatchOptions) {
    const info = await client.chain().info();
    let currentRound = (0, util_1.roundAt)(Date.now(), info);
    while (!abortController.signal.aborted) {
        const now = Date.now();
        await (0, util_1.sleep)((0, util_1.roundTime)(info, currentRound) - now);
        const beacon = await (0, util_1.retryOnError)(async () => client.get(currentRound), options.retriesOnFailure);
        yield validatedBeacon(client, beacon, currentRound);
        currentRound = currentRound + 1;
    }
}
exports.watch = watch;
const defaultWatchOptions = {
    retriesOnFailure: 3
};
// internal function for validating a beacon if validation has not been disabled in the client options
async function validatedBeacon(client, beacon, expectedRound) {
    if (client.options.disableBeaconVerification) {
        return beacon;
    }
    const info = await client.chain().info();
    if (!await (0, beacon_verification_1.verifyBeacon)(info, beacon, expectedRound)) {
        throw Error('The beacon retrieved was not valid!');
    }
    return beacon;
}
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
function isChainedBeacon(value, info) {
    return info.schemeID === 'pedersen-bls-chained' &&
        !!value.previous_signature &&
        !!value.randomness &&
        !!value.signature &&
        value.round > 0;
}
exports.isChainedBeacon = isChainedBeacon;
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
function isUnchainedBeacon(value, info) {
    return info.schemeID === 'pedersen-bls-unchained' &&
        !!value.randomness &&
        !!value.signature &&
        value.previous_signature === undefined &&
        value.round > 0;
}
exports.isUnchainedBeacon = isUnchainedBeacon;
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
function isG1G2SwappedBeacon(value, info) {
    return info.schemeID === 'bls-unchained-on-g1' &&
        !!value.randomness &&
        !!value.signature &&
        value.previous_signature === undefined &&
        value.round > 0;
}
exports.isG1G2SwappedBeacon = isG1G2SwappedBeacon;
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
function isG1Rfc9380(value, info) {
    return info.schemeID === 'bls-unchained-g1-rfc9380' &&
        !!value.randomness &&
        !!value.signature &&
        value.previous_signature === undefined &&
        value.round > 0;
}
exports.isG1Rfc9380 = isG1Rfc9380;
//# sourceMappingURL=index.js.map