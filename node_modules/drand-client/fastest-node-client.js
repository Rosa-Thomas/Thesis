"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const http_caching_chain_1 = __importStar(require("./http-caching-chain"));
const speedtest_1 = require("./speedtest");
const http_chain_client_1 = __importDefault(require("./http-chain-client"));
const defaultSpeedTestInterval = 1000 * 60 * 5;
// takes an array of drand nodes and periodically speed tests them to work out which is the fastest
// it then uses the fastest client to make calls using an underlying HTTP client
// use `.start()` to enable optimisation of the underlying base URLs
// don't forget to `.stop()` it after you're finished
class FastestNodeClient {
    baseUrls;
    options;
    speedTestIntervalMs;
    speedTests = [];
    speedTestHttpOptions = { userAgent: 'drand-web-client-speedtest' };
    constructor(baseUrls, options = index_1.defaultChainOptions, speedTestIntervalMs = defaultSpeedTestInterval) {
        this.baseUrls = baseUrls;
        this.options = options;
        this.speedTestIntervalMs = speedTestIntervalMs;
        if (baseUrls.length === 0) {
            throw Error('Can\'t optimise an empty `baseUrls` array!');
        }
    }
    async latest() {
        return new http_chain_client_1.default(this.current(), this.options).latest();
    }
    async get(roundNumber) {
        return new http_chain_client_1.default(this.current(), this.options).get(roundNumber);
    }
    chain() {
        return this.current();
    }
    start() {
        if (this.baseUrls.length === 1) {
            console.warn('There was only a single base URL in the `FastestNodeClient` - not running speed testing');
            return;
        }
        this.speedTests = this.baseUrls.map(url => {
            const testFn = async () => {
                await new http_caching_chain_1.HttpChain(url, this.options, this.speedTestHttpOptions).info();
                return;
            };
            const test = (0, speedtest_1.createSpeedTest)(testFn, this.speedTestIntervalMs);
            test.start();
            return { test, url };
        });
    }
    current() {
        if (this.speedTests.length === 0) {
            console.warn('You are not currently running speed tests to choose the fastest client. Run `.start()` to speed test');
        }
        const fastestEntry = this.speedTests
            .slice()
            .sort((entry1, entry2) => entry1.test.average() - entry2.test.average())
            .shift();
        if (!fastestEntry) {
            throw Error('Somehow there were no entries to optimise! This should be impossible by now');
        }
        return new http_caching_chain_1.default(fastestEntry.url, this.options);
    }
    stop() {
        this.speedTests.forEach(entry => entry.test.stop());
        this.speedTests = [];
    }
}
exports.default = FastestNodeClient;
//# sourceMappingURL=fastest-node-client.js.map