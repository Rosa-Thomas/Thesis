"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSpeedTest = void 0;
// a utility that tracks the last `samples` speed test execution times and returns the mean running time of them.
function createSpeedTest(test, frequencyMs, samples = 5) {
    let queue = new DroppingQueue(samples);
    let intervalId = null;
    const executeSpeedTest = async () => {
        const startTime = Date.now();
        try {
            await test();
            queue.add(Date.now() - startTime);
        }
        catch (err) {
            queue.add(Number.MAX_SAFE_INTEGER);
        }
    };
    return {
        start: () => {
            if (intervalId != null) {
                console.warn('Attempted to start a speed test, but it had already been started!');
                return;
            }
            intervalId = setInterval(executeSpeedTest, frequencyMs);
        },
        stop: () => {
            if (intervalId !== null) {
                clearInterval(intervalId);
                intervalId = null;
                queue = new DroppingQueue(samples);
            }
        },
        average: () => {
            const values = queue.get();
            if (values.length === 0) {
                return Number.MAX_SAFE_INTEGER;
            }
            const total = values.reduce((acc, next) => acc + next, 0);
            return total / values.length;
        }
    };
}
exports.createSpeedTest = createSpeedTest;
class DroppingQueue {
    capacity;
    values = [];
    constructor(capacity) {
        this.capacity = capacity;
    }
    add(value) {
        this.values.push(value);
        if (this.values.length > this.capacity) {
            this.values.pop();
        }
    }
    get() {
        return this.values;
    }
}
//# sourceMappingURL=speedtest.js.map